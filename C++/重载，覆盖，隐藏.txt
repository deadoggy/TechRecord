重载的特征有：

1) 相同的范围（在同一个类中）；

2) 函数名字相同；

3) 参数不同；

4) virtual关键字可有可无。


覆盖的特征有：

1) 不同的范围（分别位于派生类与基类）；

2) 函数名字相同；

3) 参数相同；

4) 基类函数必须有virtual关键字。



隐藏是指派生类的函数屏蔽了与其同名的基类函数，规则如下：

1) 如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。

2) 如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。



注：
    覆盖的条件是固定的，即名字相同 && （参数相同 && virtual) = a && b
    b 一共有四种情况  参数相同 & 有 virtual 
                     参数相同 & 无 virtual
                     参数不同 & 有 virtual
                     参数不同 & 无 virtual
    在函数名相同时，除了第一个，其他的条件下都会隐藏。
    即覆盖的条件是固定的， 其他的都是隐藏。

void main(void)

{

Derived d;

Base *pb = &d;

Derived *pd = &d;

// Good : behavior depends solely on type of the object

pb->f(3.14f); //运行结果: Derived::f(float) 3.14

pd->f(3.14f); //运行结果: Derived::f(float) 3.14

// Bad : behavior depends on type of the pointer

pb->g(3.14f); //运行结果: Base::g(float) 3.14

pd->g(3.14f); //运行结果: Derived::g(int) 3

// Bad : behavior depends on type of the pointer

pb->h(3.14f); //运行结果: Base::h(float) 3.14

pd->h(3.14f); //运行结果: Derived::h(float) 3.14

}

请大家注意，f()函数属于覆盖，而g()与h()属于隐藏。从上面的运行结果，
我们可以注意到在覆盖中，用基类指针和派生类指针调用函数f()时，系统
都是执行的派生类函数f()，而非基类的f()，这样实际上就是完成的“接口”
功能。而在隐藏方式中，用基类指针和派生类指针调用函数f()时，系统会进
行区分，基类指针调用时，系统执行基类的f()，而派生类指针调用时，系统
“隐藏”了基类的f()，执行派生类的f()，这也就是“隐藏”的由来。



